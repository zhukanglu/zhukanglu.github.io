<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo语法</title>
      <link href="2021/02/14/hexo-yu-fa-1/"/>
      <url>2021/02/14/hexo-yu-fa-1/</url>
      
        <content type="html"><![CDATA[<p>hexo是使用Markdown编辑文章的，我写的这些文章也都是用这种标记语言完成的。所以，我们先从Markdown说起。</p><p>什么是Markdown<br> Markdown语法<br> 例文<br> 你可以使用vim工具直接编辑md文件，也可以用记事本打开md文件编辑你的文章，也可以Markdown的编辑器编写，有很多在线的编辑器，何有不少客户端的编辑器，我是Mac系统，用的一个叫 Mou 的编辑器，还比较好使。Windows系统下，你可以自己找一下，应该也会有很好用的编辑器。</p><p>什么是Markdown</p><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯和亚伦·斯沃茨。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML文档”。 ——维基百科</p><p>先简单介绍一下，Markdown的语法，具体怎么用，我相信大家一看例文就马上明白了。</p><h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h2><p>1、分段： 两个回车</p><p>2、换行 两个空格 + 回车</p><p>3、标题 # ~ ###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题</p><p>4、引用 &gt;</p><p>5、列表 * ， + ， - ， 1. ，选其中之一，注意后面有个空格</p><p>6、代码区块 四个空格 开头</p><p>7、链接</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">[文字](链接地址)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8、图片</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">![](图片地址) //图片地址可以是本地路劲，也可以是网络地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9、强调</p><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">**文字** ， __文字__ ， _文字_ ， *文字*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10、代码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">```，``<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><p>我们在前面的已经略微的接触了一些hexo的命令，如 hexo new “my blog” ， hexo server 等。下面来介绍一下我们经常会用到的hexo命令</p><h3 id="1、新建"><a href="#1、新建" class="headerlink" title="1、新建"></a>1、新建</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">hexo new "my blog"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建的文件在 hexo/source/_posts/my-blog.md</p><h3 id="2、生成静态页面"><a href="#2、生成静态页面" class="headerlink" title="2、生成静态页面"></a>2、生成静态页面</h3><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件</p><h3 id="3、开启本地服务"><a href="#3、开启本地服务" class="headerlink" title="3、开启本地服务"></a>3、开启本地服务</h3><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令，我之前已经用过了，开启本地hexo服务用的</p><h3 id="4、部署"><a href="#4、部署" class="headerlink" title="4、部署"></a>4、部署</h3><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部署到git上的时候，需要用这个命令，下一篇中，我们会使用到这个命令</p><h3 id="5、清除-public"><a href="#5、清除-public" class="headerlink" title="5、清除 public"></a>5、清除 public</h3><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。</p><h3 id="6、更新algolia搜索Index"><a href="#6、更新algolia搜索Index" class="headerlink" title="6、更新algolia搜索Index"></a>6、更新algolia搜索Index</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">hexo algolia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当发布新文章时需要在Algolia数据库添加新的Index，这样才能添加到搜索中</p><p><a href="https://link.jianshu.com/?t=http://theme-next.iissnan.com/third-party-services.html#algolia-search">关于安装algolia，参考next官网请</a></p><p>以上这些都是我在使用过程中经常用到的一些hexo命令。最为详细、最为全面的说明文档当然还是在 <a href="https://link.jianshu.com/?t=http://theme-next.iissnan.com">官网</a> 。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo-admin</title>
      <link href="2021/02/14/hexo-admin/"/>
      <url>2021/02/14/hexo-admin/</url>
      
        <content type="html"><![CDATA[<h1 id="为hexo添加hexo-admin组件"><a href="#为hexo添加hexo-admin组件" class="headerlink" title="为hexo添加hexo-admin组件"></a>为hexo添加hexo-admin组件</h1><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><blockquote><p>已安装好<a href="https://hexo.io/zh-cn/">hexo</a>，选择好自己的<a href="https://hexo.io/themes/">主题</a>(我选择的主题是<a href="https://github.com/Molunerfinn/hexo-theme-melody">melody</a>)，并部署到<a href="https://github.com/">GitHub</a>等静态托管服务器上。</p></blockquote><h4 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h4><blockquote><p><a href="https://github.com/jaredly/hexo-admin"><strong>hexo-admin</strong></a> 是一个Hexo博客引擎的管理用户界面插件。这个插件最初是作为本地编辑器设计的，在本地运行<a href="https://hexo.io/zh-cn/">hexo</a>使用<strong>hexo-admin</strong>编写文章，然后通过<code>hexo g</code>或<code>hexo d</code>（<code>hexo g</code>是本地渲染，<code>hexo d</code>是将渲染的静态页面发布到<a href="https://github.com/">GitHub</a>）将生成的静态页面发布到<a href="https://github.com/">GitHub</a>等静态服务器。如果你使用的是非静态托管服务器，比如自己买的主机搭建的<a href="https://hexo.io/zh-cn/">hexo</a>，那么一定要设置<a href="https://github.com/jaredly/hexo-admin"><strong>hexo-admin</strong></a>  的密码，否则谁都可以编辑你的文章。</p></blockquote><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><ol><li><p>首先进入hexo创建的博客项目的根目录下，执行</p><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">npm install --save hexo-admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"> E:\hexo\lulu&gt;npm install hexo-admin --savenpm WARN deprecated bcrypt-nodejs@0.0.3: bcrypt-nodejs is no longer actively maintained. Please use bcrypt or bcryptjs. See https://github.com/kelektiv/node.bcrypt.js/wiki/bcrypt-vs-brypt.js to learn more about these two optionsnpm WARN deprecated minimatch@2.0.10: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issuenpm WARN deprecated connect@2.7.11: connect 2.x series is deprecatednpm WARN deprecated chokidar@1.7.0: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.npm WARN deprecated fsevents@1.2.13: fsevents 1 will break on node v14+ and could be using insecure binaries. Upgrade to fsevents 2.npm WARN deprecated highlight.js@8.9.1: Version no longer supported. Upgrade to @latestnpm WARN deprecated request@2.81.0: request has been deprecated, see https://github.com/request/request/issues/3142npm WARN deprecated har-validator@4.2.1: this library is no longer supportednpm WARN deprecated hawk@3.1.3: This module moved to @hapi/hawk. Please make sure to switch over as this distribution is no longer supported and may contain bugs and critical security issues.npm WARN deprecated cryptiles@2.0.5: This version has been deprecated in accordance with the hapi support policy (hapi.im/support). Please upgrade to the latest version to get the best features, bug fixes, and security patches. If you are unable to upgrade at this time, paid support is available for older versions (hapi.im/commercial).npm WARN deprecated sntp@1.0.9: This module moved to @hapi/sntp. Please make sure to switch over as this distribution is no longer supported and may contain bugs and critical security issues.npm WARN deprecated boom@2.10.1: This version has been deprecated in accordance with the hapi support policy (hapi.im/support). Please upgrade to the latest version to get the best features, bug fixes, and security patches. If you are unable to upgrade at this time, paid support is available for older versions (hapi.im/commercial).npm WARN deprecated hoek@2.16.3: This version has been deprecated in accordance with the hapi support policy (hapi.im/support). Please upgrade to the latest version to get the best features, bug fixes, and security patches. If you are unable to upgrade at this time, paid support is available for older versions (hapi.im/commercial).npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules\hexo-admin\node_modules\chokidar\node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.13 (node_modules\hexo-prism-plugin\node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})+ hexo-admin@2.3.0  added 278 packages from 459 contributors and audited 868 packages in 146.65s24 packages are looking for funding  run `npm fund` for detailsfound 21 vulnerabilities (6 low, 6 moderate, 8 high, 1 critical)  run `npm audit fix` to fix them, or `npm audit` for details<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mac可能需要root权限，前面加个<code>sudo</code> 就可以了。如果报错缺少组件，则缺少什么安装什么，<code>npm install</code> 加缺少的组件。</p></li><li><p>运行下列命令启动<a href="https://github.com/jaredly/hexo-admin"><strong>hexo-admin</strong></a> ：</p><p>hexo server -d<br> 打开 <a href="http://localhost:4000/admin/">http://localhost:4000/admin/</a>  就可以访问到hexo-admin管理页面了。</p></li></ol><h4 id="密码保护"><a href="#密码保护" class="headerlink" title="密码保护"></a>密码保护</h4><p>打开<code>setting</code>，点击<code>Setup authentification here</code>输入用户名，密码，密钥，下面会自动生成配置文件，复制加在<a href="https://hexo.io/zh-cn/">hexo</a>根目录下的<code>_config.yml</code>中：</p><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">admin:  username: myfavoritename  password_hash: be121740bf988b2225a313fa1f107ca1  secret: a secret something<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重启<a href="https://hexo.io/zh-cn/">hexo</a>，就可以看到登录页面了</p><h4 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h4><p>进入后台之后点击<code>Deploy</code>，里面的Deploy按钮是用来执行发布脚本的，所以我们先在博客根目录下新建个目录<code>admin_script</code>，然后在目录中新建一个脚本<code>hexo-g.sh</code>，里面写下下面代码然后保存，</p><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">hexo g &amp;&amp; hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后给hexo-g.sh加入可执行权限</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">chmod +x hexo-d.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在<code>_config.yml</code>中的admin下添加</p><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">admin:  username: myfavoritename  password_hash: be121740bf988b2225a313fa1f107ca1  secret: a secret something  deployCommand: ./admin_script/hexo-d.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置发布执行的脚本，点击<code>Deploy</code>就会执行这个命令并提交到<a href="https://github.com/">GitHub</a>上。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git小乌龟安装教程</title>
      <link href="2021/02/14/git-install/"/>
      <url>2021/02/14/git-install/</url>
      
        <content type="html"><![CDATA[<h1 id="git-小乌龟安装教程"><a href="#git-小乌龟安装教程" class="headerlink" title="git 小乌龟安装教程"></a><a href="https://www.cnblogs.com/xuanwotianming153/p/8504762.html">git 小乌龟安装教程</a></h1><h1 id="一、windows系统安装git"><a href="#一、windows系统安装git" class="headerlink" title="一、windows系统安装git"></a>一、windows系统安装git</h1><p>首先下载git for windows客户端<a href="http://msysgit.github.io/">http://msysgit.github.io/</a><br>安装过程没什么特别的，不停next就ok了<br><img src="http://img.blog.csdn.net/20150314225733706" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20150314225927952" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20150314225959070" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20150314225958918" alt="这里写图片描述"><br>图太多就不继续了~~安装完之后最好重启一下。</p><p>安装完成之后右键如果出现这几个东西，那么git你就安装完成了。<br><img src="http://img.blog.csdn.net/20150314230101486" alt="这里写图片描述"></p><h1 id="二、安装tortoise-git（乌龟git）"><a href="#二、安装tortoise-git（乌龟git）" class="headerlink" title="二、安装tortoise git（乌龟git）"></a>二、安装tortoise git（乌龟git）</h1><p>同样先下载<a href="http://download.tortoisegit.org/tgit/%EF%BC%8C%E9%80%89%E6%8B%A9%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E5%B0%B1ok%E4%BA%86%EF%BC%8C%E4%BE%8B%E5%A6%82%E6%88%91%E7%8E%B0%E5%9C%A8%E6%98%AF1.8.13.0">http://download.tortoisegit.org/tgit/，选择最新版本下载就ok了，例如我现在是1.8.13.0</a><br>我的电脑是64位版本，所以就选择对应的64位乌龟git，下面是语言包，如果英语很强的大神可以不用下，我这种英语渣渣就还是用中文包吧~~<br><img src="http://img.blog.csdn.net/20150314230142000" alt="这里写图片描述"></p><p>下载完之后先安装主程序，在安装语言包<br><img src="http://img.blog.csdn.net/20150314230223605" alt="这里写图片描述"><br>同样的不停next就ok了，我就不继续贴图了。<br>同样语言包的安装也类似<br><img src="http://img.blog.csdn.net/20150314230239158" alt="这里写图片描述"></p><p>安装完语言包之后，右键→tortogit→setting，把language项改为中文，确定即可<br><img src="http://img.blog.csdn.net/20150314230426787" alt="这里写图片描述"></p><p>这时你再右键如果如下图那就OK鸟。<br><img src="http://img.blog.csdn.net/20150314230440390" alt="这里写图片描述"></p><p>哦对了，其实最新版本的git for windows也是有界面的，不再是以前的纯命令行操作，但是我在公司用习惯了乌龟，所以感觉还是直接用乌龟比较方便点~~</p><h1 id="三、使用git"><a href="#三、使用git" class="headerlink" title="三、使用git"></a>三、使用git</h1><p>首先你得找一个git的代码托管网站，百度搜一大把，一般用github或者开源中国的都行，我使用的是开源中国的代码托管<br>先新建一个项目——test<br><img src="http://img.blog.csdn.net/20150314230501762" alt="这里写图片描述"><br>项目建成之后如下<br><img src="http://img.blog.csdn.net/20150314230527174" alt="这里写图片描述"><br>点击HTTPS，然后在点击箭头指向的位置，将url复制到剪贴板，等下会用到的~~</p><p>托管中心的操作基本就完成了，接下来就是我们本地的操作了<br>随便新建一个文件夹，例如还是test<br><img src="http://img.blog.csdn.net/20150314230416473" alt="这里写图片描述"><br>点击文件夹，右键→Git在这里创建版本库，跳出如下图，不要勾选直接确认<br><img src="http://img.blog.csdn.net/20150314230433321" alt="这里写图片描述"><br>之后test文件夹里会出现一个隐藏的文件夹.git<br><img src="http://img.blog.csdn.net/20150314230451043" alt="这里写图片描述"></p><p>到现在为止我们分别在托管中心和本地做了准备，<br>接下来我们就要将他们关联起来</p><p>继续右键test文件夹→tortoisegit→设置<br>跳出如下设置窗口，把你在托管中心注册的用户名和邮箱填上去<br><img src="http://img.blog.csdn.net/20150314230513368" alt="这里写图片描述"></p><p>然后选择远端<br>将我们刚才复制的URL填到URL和推送URL上，然后点击添加/保存<br><img src="http://img.blog.csdn.net/20150314230651368" alt="这里写图片描述"><br>之后乌龟git会获取远端信息，直接确认。<br><img src="http://img.blog.csdn.net/20150314230717529" alt="这里写图片描述"></p><p>这是需要输入你在托管中心注册的用户名和密码<br><img src="http://img.blog.csdn.net/20150314230612851" alt="这里写图片描述"><br>完成后如下<br><img src="http://img.blog.csdn.net/20150314230626220" alt="这里写图片描述"></p><p>   提交文件</p><p>　　通过TortoiseGit提交文件，也就是右键菜单功能</p><p>　　Git 提交（C）—&gt; “master”…　　　　// 相当于命令行~: git add 文件，这里只是将文件提交到本地版本库，并非提交到远程版本服务器</p><p>　　如下图：</p><p>　　<img src="https://images0.cnblogs.com/blog/164952/201411/031702085179482.jpg" alt="img"></p><p>　　这里提交之后，其他客户端不能获取到你提交的文件，因为你的文件没有更新到远程版本服务器上。</p><p>　　同步到版本服务器</p><p>　　通过TortoiseGit提交文件到版本服务器，也就是右键菜单功能</p><p>　　Git 同步　　　　　　　　　　　　　　 // 相当于命令行~: git push origin master</p><p>　　如下图：</p><p>　　<img src="https://images0.cnblogs.com/blog/164952/201411/031704139554660.jpg" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql for windows</title>
      <link href="2021/02/13/mysql-for-windows/"/>
      <url>2021/02/13/mysql-for-windows/</url>
      
        <content type="html"><![CDATA[<p>MySQL的安装与配置——详细教程</p><h1 id="免安装版的Mysql"><a href="#免安装版的Mysql" class="headerlink" title="免安装版的Mysql"></a>免安装版的Mysql</h1><p>　　MySQL关是一种关系数据库管理系统，所使用的 SQL 语言是用于访问<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>的最常用的</p><p>标准化语言，其特点为体积小、速度快、总体拥有成本低，尤其是<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E7%A0%81/7176422">开放源码</a>这一特点，在 Web</p><p>应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据</p><p>库管理系统)应用软件之一。</p><p>首先：要先进入mysql官网里（Mysql的官网–&gt;<a href="https://www.mysql.com/%EF%BC%89%EF%BC%8C%E4%B8%8B%E9%9D%A2%E6%98%AF%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4%EF%BC%9A">https://www.mysql.com/），下面是详细步骤：</a></p><h2 id="一、下载安装包："><a href="#一、下载安装包：" class="headerlink" title="一、下载安装包："></a><strong>一、下载安装包：</strong></h2><p>　　①进入官网后，点击”Dowload”，然后页面往下拉</p><p>　　<strong><img src="https://img2018.cnblogs.com/blog/1727568/201909/1727568-20190915192559647-350219166.jpg" alt="img"></strong></p><p>　　</p><p>　　②接下来看到的页面是这样的，红色框框的链接就是mysql社区版，是免费的mysql版本，然后我们点击这个框框的链接：↓</p><p>　　<img src="https://img2018.cnblogs.com/blog/1727568/201909/1727568-20190915192752591-1371678378.jpg" alt="img"></p><p>　　　 ③接下来跳转到这个页面，在这里，我们只要下载社区版的Server就可以了：↓</p><p><img src="https://img2018.cnblogs.com/blog/1727568/201909/1727568-20190915193055444-1634354218.jpg" alt="img"></p><p>　　④下载免安装版(windows以外的其他系统除外)</p><p><img src="https://img2018.cnblogs.com/blog/1727568/201909/1727568-20190915193247068-1867170933.jpg" alt="img"></p><p>　　 ***这样，安装包就下载好了！</p><p>　　***注意，安装的目录应当放在指定位置，，其次，绝对路径中避免出现中文，推荐首选英文为命名条件！！！！(我的为参考)</p><p>　　</p><p>　　<strong><img src="https://img2018.cnblogs.com/blog/1727568/201909/1727568-20190915193949895-2127429091.jpg" alt="img"></strong></p><h2 id="二、Mysql的配置"><a href="#二、Mysql的配置" class="headerlink" title="二、Mysql的配置"></a><strong>二、Mysql的配置</strong></h2><p>　　*<strong>以管理员身份打开命令行(如下图所示)，一定要是管理员身份，否则由于后续部分命令需要权限，出现错误！</strong></p><p>　　<strong><img src="https://img2018.cnblogs.com/blog/1727568/201909/1727568-20190915194138600-1666145922.jpg" alt="img"></strong></p><p>　　</p><p>　　①下转到mysql的bin目录下：**<br>**</p><p>　　<img src="https://img2018.cnblogs.com/blog/1727568/201909/1727568-20190915194319422-1269147823.jpg" alt="img"></p><p>　　②安装mysql的服务：mysqld –install</p><p>　　<img src="https://img2018.cnblogs.com/blog/1727568/201909/1727568-20190915194355509-621408710.jpg" alt="img"></p><p>　　</p><p>　　③初始化mysql，在这里，初始化会产生一个随机密码,如下图框框所示，记住这个密码，后面会用到(mysqld –initialize –console)</p><p>　　</p><p>　　<img src="https://img2018.cnblogs.com/blog/1727568/201909/1727568-20190915194537624-1288770126.jpg" alt="img"></p><p>　　</p><p>　　④开启mysql的服务(net start mysql)</p><p>　　<img src="https://img2018.cnblogs.com/blog/1727568/201909/1727568-20190915194809019-447378790.jpg" alt="img"></p><p>　　⑤登录验证，mysql是否安装成功！(要注意上面产生的随机密码，不包括前面符号前面的空格，否则会登陆失败)，如果和下图所示一样，则说明你的mysql已经安装成功！注意，，一定要先开启服务，不然会登陆失败，出现拒绝访问的提示符！！！</p><p>　　<img src="https://img2018.cnblogs.com/blog/1727568/201909/1727568-20190915194855594-1799062186.jpg" alt="img"></p><p>　　<strong>修改密码：</strong></p><p>　　　　由于初始化产生的随机密码太复杂，，不便于我们登录mysql，因此，我们应当修改一个自己能记住的密码！！</p><p>　　<img src="https://img2018.cnblogs.com/blog/1727568/201909/1727568-20190915195232011-1164270181.jpg" alt="img"></p><p>　　再次登录验证新密码：</p><p>　　<img src="https://img2018.cnblogs.com/blog/1727568/201909/1727568-20190915195310138-1959548424.jpg" alt="img"></p><p>　　<strong>设置系统的全局变量：</strong></p><p>　　　　为了方便登录操作mysql，在这里我们设置一个全局变量：↓</p><p>　　　　①点击”我的电脑”–&gt;”属性”–&gt;’’高级系统设置’’–&gt;’’环境变量’’,接下来如下图所操作</p><p>　　</p><p>　　　　<img src="https://img2018.cnblogs.com/blog/1727568/201909/1727568-20190915195658938-215279743.jpg" alt="img"></p><p>　　　　②把新建的mysql变量添加到Path路径变量中，点击确定，即完成：</p><p>　　　　<img src="https://img2018.cnblogs.com/blog/1727568/201909/1727568-20190915195808186-1920486822.jpg" alt="img"></p><p>　　　　</p><p>　　　　配置完成之后，每当我们想要用命令行使用mysql时，只需要win+R，–&gt;输入”cmd”打开命令行，之后输入登录sql语句即可。</p><p>　　</p><p>　　　　③在mysql目录下创建一个ini或cnf配置文件，在这里我创建的是ini配置文件，里面写的代码是mysql的一些基本配置</p><p>　　　　<img src="https://img2018.cnblogs.com/blog/1727568/201909/1727568-20190915201058332-997469892.jpg" alt="img"></p><p>　　就这样，一个免安装版的Mysql就安装并配置完成了</p><h3 id="2-1可能会出现的问题"><a href="#2-1可能会出现的问题" class="headerlink" title="2.1可能会出现的问题"></a>2.1可能会出现的问题</h3><p> 1、ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO/YES) </p><p> 2、”由于找不到MSVCR120.dll，无法继续执行代码。重新安装程序可能会解决此问题” 或者 “由于找不到VCRUNTIME140_1.dll，无法继续执行代码。重新安装程序可能会解决此问题” </p><p><strong>解决办法</strong>： 转移至我另外两篇博客</p><p>1、<a href="https://www.cnblogs.com/winton-nfs/p/12956811.html">ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO/YES)</a> </p><p>2、<a href="https://www.cnblogs.com/winton-nfs/p/13854052.html">解决mysql问题：由于找不到MSVCR120.dll,无法继续执行代码.重新安装程序可能会解决此问题。</a> </p><h3 id="2-2命令参考："><a href="#2-2命令参考：" class="headerlink" title="2.2命令参考："></a>2.2命令参考：</h3><p><strong>①安装服务：</strong></p><p>mysqld –install</p><p><strong>②\</strong>初始化：****　</p><p>mysqld –initialize –console</p><p><strong><em>\</em>③开启服务：**</strong></p><p>net start mysql</p><p><strong><em>\</em>④关闭****服务：******</strong></p><p>net stop mysql</p><p><strong><em>*</em>***⑤登录mysql：******</strong></p><p>mysql -u root -p</p><p><strong><em>*</em>***Enter PassWord：(******</strong>密码*<strong>\</strong>***)********</p><p><strong><em>*</em>***⑥修改密码：******</strong></p><p>alter user ‘root’@’localhost’ identified by ‘root’;(by 接着的是密码)</p><p><strong>⑦标记删除mysql服务</strong>：</p><p>sc delete mysql</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>emoji表情</title>
      <link href="2021/02/13/emoji/"/>
      <url>2021/02/13/emoji/</url>
      
        <content type="html"><![CDATA[<p>emoji表情</p><table><thead><tr><th><code>:sun_with_face:</code></th><th>🌞</th><th><code>:smile:</code></th><th>😄</th></tr></thead><tbody><tr><td><code>:laughing:</code></td><td>😆</td><td><code>:blush:</code></td><td>😊</td></tr><tr><td><code>:smiley:</code></td><td>😃</td><td><code>:relaxed:</code></td><td>☺️</td></tr><tr><td><code>:smirk:</code></td><td>😏</td><td><code>:heart_eyes:</code></td><td>😍</td></tr><tr><td><code>:kissing_heart:</code></td><td>😘</td><td><code>:kissing_closed_eyes:</code></td><td>😚</td></tr><tr><td><code>:flushed:</code></td><td>😳</td><td><code>:relieved:</code></td><td>😌</td></tr><tr><td><code>:satisfied:</code></td><td>😆</td><td><code>:grin:</code></td><td>😁</td></tr><tr><td><code>:wink:</code></td><td>😉</td><td><code>:stuck_out_tongue_winking_eye:</code></td><td>😜</td></tr><tr><td><code>:stuck_out_tongue_closed_eyes:</code></td><td>😝</td><td><code>:grinning:</code></td><td>😀</td></tr><tr><td><code>:kissing:</code></td><td>😗</td><td><code>:kissing_smiling_eyes:</code></td><td>😙</td></tr><tr><td><code>:stuck_out_tongue:</code></td><td>😛</td><td><code>:sleeping:</code></td><td>😴</td></tr><tr><td><code>:worried:</code></td><td>😟</td><td><code>:frowning:</code></td><td>😦</td></tr><tr><td><code>:anguished:</code></td><td>😧</td><td><code>:open_mouth:</code></td><td>😮</td></tr><tr><td><code>:confused:</code></td><td>😕</td><td><code>:hushed:</code></td><td>😯</td></tr><tr><td><code>:expressionless:</code></td><td>😑</td><td><code>:unamused:</code></td><td>😒</td></tr><tr><td><code>:sweat_smile:</code></td><td>😅</td><td><code>:sweat:</code></td><td>😓</td></tr></tbody></table><p><span class="github-emoji"><span>😛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>build hexo</title>
      <link href="2021/02/12/build-hexo/"/>
      <url>2021/02/12/build-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Hexo搭建个人博客"><a href="#基于Hexo搭建个人博客" class="headerlink" title="基于Hexo搭建个人博客"></a>基于Hexo搭建个人博客</h1><p>前言：什么是 Hexo(<a href="https://hexo.io/zh-cn/docs/)%EF%BC%8CHexo]%E6%98%AF%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E3%80%81%E7%AE%80%E6%B4%81%E4%B8%94%E9%AB%98%E6%95%88%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6%E3%80%82Hexo">https://hexo.io/zh-cn/docs/)，Hexo]是一个快速、简洁且高效的博客框架。Hexo</a> 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。因此我们可以通过Hexo+Github搭建博客并且部署到服务器上。</p><h4 id="1、基本环境的搭建"><a href="#1、基本环境的搭建" class="headerlink" title="1、基本环境的搭建"></a>1、基本环境的搭建</h4><p>  搭建博客之前我们先要安装需要的环境、这里以Windows系统作为演示、其他系统类似。<br>首先、需要安装 Node.js(<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a>) 和 Git(<a href="https://git-scm.com/downloads)%EF%BC%8C%E5%A4%A7%E5%AE%B6%E5%B0%BD%E9%87%8F%E5%8E%BB%E4%B8%8B%E8%BD%BD.exe%E6%89%A9%E5%B1%95%E5%90%8D%E7%9A%84%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%EF%BC%8C%E8%BF%99%E6%A0%B7%E7%9A%84%E5%A5%BD%E5%A4%84%E6%98%AF%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E3%80%81%E7%9C%81%E5%8E%BB%E4%BA%86%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E3%80%82%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82%E5%A6%82%E6%9E%9C%E6%9C%89%E9%97%AE%E9%A2%98%E5%8D%B8%E8%BD%BD%E5%AE%89%E8%A3%85%E6%97%A7%E7%89%88%E3%80%82">https://git-scm.com/downloads)，大家尽量去下载.exe扩展名的可执行文件，这样的好处是一键安装、省去了一些配置。安装版本也可以安装最新的版本。如果有问题卸载安装旧版。</a></p><p>安装完成之后、打开CMD</p><p>验证Node.js的方法</p><pre class="line-numbers language-none"><code class="language-none">node -vnpm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h5><p>下载速度可能很慢。Winddows用户可以前往 淘宝 Git for Windows(<a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a>) 镜像 下载 git 安装包。<br>验证Git的方法(CMD中输入)<br>git –verion<br>同样输入后能够显示版本说明安装成功。</p><h4 id="2、博客搭建"><a href="#2、博客搭建" class="headerlink" title="2、博客搭建"></a>2、博客搭建</h4><p>安装Hexo</p><p>通过npm命令安装Hexo(CMD中输入)</p><p>npm install -g hexo-cli</p><p>之后是一些常用的Hexo命令、更详细的参考官方文档(<a href="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a>)</p><p>init</p><pre class="line-numbers language-none"><code class="language-none">hexo init [folder]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建Hexo网站、folder为文件名、如图</p><p>这样就代表创建成功。但是发现npm报警告(<code>注意</code>:在windows环境，所以可以忽略这个警告、如果是其他系统、可以通过查阅资料解决。)</p><p>Hexo的目录结构：</p><p>|– _config.yml<br>|– package.json<br>|– scaffolds<br>|– source<br>  |– _posts<br>|– public<br>|– themes<br>|– .gitignore</p><p>_config.yml：网站的全局配置文件，设置包括网站标题、副标题、作者、关键字和描述信息等。<br>package.json：框架的基本参数信息和它所依赖的插件，在 npm 安装时使用 –save 保存进去。<br>scaffolds：本意是 “脚手架” 的意思，这里引申为模板文件夹。当你 hexo new [layout(布局)] [title] 的时候，Hexo 会根据该文件夹下的对应文件进行初始化构建。<br>source：正如其名，source 文件夹存储一些直接来自用户的文件，它很重要，如果不出意外你的文章就是保存在这个文件夹下（_posts）。_posts 目录下的md文件，会被编译成 html 文件，放到 public 文件夹下。<br>public：参考 source 文件夹，在初始化后是没有 public 文件夹的，除非 hexo g 编译生成静态文件后，public 文件夹会自动生成。使用 hexo clean 清除 db.json 和 public 文件夹下的所有文件。<br>themes：主题文件夹，存储主题。主题可以在 Github 上 clone。<br>.gitignore：.gitignore 文件作用是声明不被 git 记录的文件，hexo init <folder> 也会产生一个 .gitignore：文件，可以先删除或者直接编辑，对hexo不会有影响。</folder></p><p>打开_config.yml文件、找到以下的地方、需要自己配置的几个地方：</p><h1 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h1><p>title: 网站标题       //网站标题<br>subtitle: 副标题     //副标题<br>description: 描述信息  //描述信息<br>keywords: 关键字     //关键字<br>author: 作者    //作者<br>language: zh-CN       //语言 可以在 /themes/landscape/languages 找到支持的语言<br>timezone: Asia/Shanghai    //时区 Asia/Shanghai</p><p>之后的命令一定要cd到文件夹(博客根目录)中进行操作！！！</p><p>这里可以先安装npm install <a href="mailto:cheerio@0.22.0">cheerio@0.22.0</a> –save,在后面使用主题可能会报错，所以先安装这个。</p><p>clean</p><pre class="line-numbers language-none"><code class="language-none">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><p>server<br><code>hexo server</code><br>或(简写)<br><code>hexo s</code></p><p>启动服务器。默认访问的网址： <a href="http://localhost:4000/">http://localhost:4000/</a> , 还可以带参数。</p><p>-p, –port ：重设端口<br>-s, –static：只使用静态文件<br> -l, –log：启动日记记录，使用覆盖记录格式 </p><p>启动成功如图：</p><p>Hexo页面</p><p>generate<br>hexo generate<br>或(简写)<br>hexo g</p><p>生成静态文件。</p><p>deploy<br>hexo deploy<br>或(简写)<br>hexo d</p><p>部署网站。同样可以接参数。</p><p>-g, –generate：部署之前预先生成静态文件 。</p><p>-m,–message:</p><p>这里与后面部署到Github/Gitee上结合使用。</p><p>new</p><pre class="line-numbers language-none"><code class="language-none">hexo new [title]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建一篇文章。title为文章名。<br>例子：hexo new “blog”</p><p>创建的md文件在 /source/_posts/blog.md 中、一样可以接参数。</p><p>-p, –path：自定义新文章的路径<br>|-r, –replace：如果存在同名文章，将其替换<br>-s, –slug：文章的 Slug，作为新文章的文件名和发布后的 URL</p><p>一个基本的步骤：</p><pre class="line-numbers language-none"><code class="language-none">hexo new "blog"hexo cleanhexo s(用于本地调试)hexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里、你应该了解如何在本地搭建Hexo博客了。接下来是主题美化。</p><h4 id="3、主题美化"><a href="#3、主题美化" class="headerlink" title="3、主题美化"></a>3、主题美化</h4><p>使用主题可以让我们的博客更加的好看。所以我们选择下载自己喜欢的主题。</p><p>Hexo默认使用的是landscape官方主题、我们可以通过下载其他主题进行更换。<br>1、通过官方主题网站(<a href="https://hexo.io/themes/)%E5%8F%AF%E4%BB%A5%E6%89%BE%E5%88%B0%E4%B8%BB%E9%A2%98%E3%80%82">https://hexo.io/themes/)可以找到主题。</a><br>2、直接在Github中搜索hexo-theme相关的内容。</p><p>下载主题</p><p>git clone Github主题地址 themes/文件名</p><p>例如我想下载 Butterfly 主题、只需要git clone <a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a> themes/Butterfly 就可以了。</p><p>下载完成之后配置_config.yml、改成上面的那个文件名。</p><h1 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h1><h2 id="Plugins-https-hexo-io-plugins"><a href="#Plugins-https-hexo-io-plugins" class="headerlink" title="Plugins: https://hexo.io/plugins/"></a>Plugins: <a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></h2><h2 id="Themes-https-hexo-io-themes"><a href="#Themes-https-hexo-io-themes" class="headerlink" title="Themes: https://hexo.io/themes/"></a>Themes: <a href="https://hexo.io/themes/">https://hexo.io/themes/</a></h2><p>theme: Butterfly</p><p>这里介绍我喜欢的几个主题、当然也可以自己去找:<br>Butterfly(<a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a>): 现在正在使用的主题、页面、个性化都很好、集成了很多插件。</p><p>Buttery主题<br>matery(<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a>): 一个基于材料设计和响应式设计而成的全面、美观的Hexo主题。</p><p>matery主题<br>更多关于主题的可以点击上述链接进入官网进行详细的了解。</p><h4 id="4、博客部署"><a href="#4、博客部署" class="headerlink" title="4、博客部署"></a>4、博客部署</h4><p>博客已经搭建好了、如何部署到Web上呢？</p><p>Github提供了Github Pages，Github Pages是Github免费给开发者提供的一款托管个人网站的产品，目前只能托管静态内容，我们使用Hexo搭建的就是静态博客， 所以非常适合用来搭博客。<br>当然还用Gitee Pages，就不作过多的介绍了。这里使用Github(Github速度太慢、Coding没弄好、所以还是使用Gitee)。</p><p>简单介绍一些步骤及命令。(如果没有账号可以先去注册、这里直接讲创建仓库)</p><p>步骤很简单，创建仓库、如图：</p><p>创建步骤</p><p>配置SSH-Key</p><p>在Cmd中输入以下内容</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name "你的用户名"git config --global user.email "你的邮箱@example.com"ssh-keygen -t rsa -C "你的邮箱e@example.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后找到生成的秘钥：位置在 C:/Users/你电脑的用户名/.ssh<br>用记事本打开id_rsa.pub复制里面的内容</p><p>进入 <a href="https://github.com/settings/keys">https://github.com/settings/keys</a> 点击New SSH Key把之前复制的内容粘贴到这里就可以了。</p><p>添加SSH keys<br>安装部署插件</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成之后在_config.yml中配置：</p><p>deploy:<br> type: git<br> repo: 你创建仓库的位置<br> branch: master</p><p>如图：</p><p>配置完成之后通过hexo d就可以部署到Github上了。</p><p>Github网站地址：</p><p>Settings<br>Gitee网址：</p><p>服务-&gt;Gitee Pages</p><h4 id="5、其他"><a href="#5、其他" class="headerlink" title="5、其他"></a>5、其他</h4><p>Hexo博客搭建完成了、主题也美化了、接下来就介绍几个常用的Hexo插件！</p><p>Valine 评论功能</p><p>无后端的评论功能。</p><p>官方教程：<a href="https://valine.js.org/quickstart.html">https://valine.js.org/quickstart.html</a></p><p>效果如图：</p><p>aplayer 音乐插件</p><p>在线音乐播放器、支持一些平台的歌单播放。</p><p>官方教程：<a href="https://github.com/MoePlayer/hexo-tag-aplayer">https://github.com/MoePlayer/hexo-tag-aplayer</a></p><p>效果如图：</p><p>bilibili-bangumi 番剧插件</p><p>显示番剧：想看、在看、已看功能。</p><p>官方教程：<a href="https://github.com/HCLonely/hexo-bilibili-bangumi">https://github.com/HCLonely/hexo-bilibili-bangumi</a></p><p>看板娘</p><p>很可爱的Live2D！<br>Live2D Widget：<a href="https://github.com/stevenjoezhang/live2d-widget">https://github.com/stevenjoezhang/live2d-widget</a><br>Live2D demo：<a href="https://github.com/fghrsh/live2d_demo">https://github.com/fghrsh/live2d_demo</a></p><p>效果如图：</p><p>到这里、Hexo搭建博客到这里就结束了、更多功能可以查阅官方文档。<br>我的博客地址：<a href="https://zykjofficial.gitee.io/">https://zykjofficial.gitee.io</a><br>博客的后续功能也会继续完善的。如果这篇文章对你有用的话、记得三连哟！！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/02/12/hello-world/"/>
      <url>2021/02/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
